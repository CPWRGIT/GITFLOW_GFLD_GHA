name: code-pipeline-sync-local


on: 
  push:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Proceed'
        required: true
        default: 'Yes'
        type: choice
        options:
          - Yes
          - No

jobs:
  feature-branch-build:
   if: (startsWith(github.ref, 'refs/heads/feature/'))
   runs-on: [self-hosted]
   env:
      Win_Topaz_Location: ${{ vars.CLI_LOCATION }}
      containerDesc: 'PUSH TO FEATURE - GHE - '
   steps:
      - name: checkout step
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}      
      - name: sync step
        uses: bmc-compuware/ispw-sync-local@ZENG-318739
        id: sync
        with:
          host: ${{ vars.HCI_HOST }}
          port: ${{ vars.HCI_PORT }}
          uid: ${{ vars.TSO_USER }}
          pass: ${{ secrets.TSO_TOKEN }}
          runtimeConfiguration: ${{ vars.CP_RUNTIME }}
          stream: ${{ vars.CP_STREAM }}
          application: ${{ vars.CP_APPL }}
          subAppl: ${{ vars.CP_SUBAPPL }}
          checkoutLevel: 'FEAT'
          gitUid: ${{ vars.GIT_USERID }}
          gitToken: ${{ secrets.GIT_TOKEN }}
          winTopazPath: ${{ env.Win_Topaz_Location }}
          containerCreation: 'per-branch'
          showEnv: true
          assignmentPrefix: ${{ vars.CP_ASSIGNPREFIX }}
          ispwConfigPath: 'GenApp_MainframeCore\ispwconfig.yml'
      
      - name: Build
        uses: bmc-compuware/ispw-build@v1
        id: build
        with:
          ces_url: ${{ vars.CES_URL }}
          ces_token: ${{ secrets.CES_TOKEN }}
          srid: 'ispw'
          runtime_configuration: ${{ vars.CP_RUNTIME }}
          build_automatically: ${{ steps.sync.outputs.automaticBuildJson }}
      - name: Get the number of build failures
        run: echo "The number of build failures is ${{ steps.build.outputs.generate_failed_count }}"

      - name: Run Unit Tests
        run: echo "Ran Unit Tests successfully"  

  release-branch-build:
   if: (startsWith(github.ref, 'refs/heads/release/'))
   runs-on: [self-hosted]
   env:
    Win_Topaz_Location: ${{ vars.CLI_LOCATION }}
    containerDesc: 'PUSH TO RELEASE - GHE - '
   steps:
      - name: checkout step
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
          
      - name: Sync code 
        shell: pwsh
        id: sync
        run: |
         $currentTag = (git tag --sort=-refname).Split("`n")[0].Trim()
         $previousTag = (git tag --sort=-refname).Split("`n")[1].Trim()
            
         $fromCommit = (git rev-list -1 $previousTag)
         $toCommit = (git rev-parse --verify HEAD)
            
         $currentCommit  = $toCommit
         $previousCommit = $fromCommit
            

         cmd.exe /c "${{ env.Win_Topaz_Location }}\IspwCLI.bat" \
         -operation syncGitToIspw \
         -gitLocalPath '.\' \
         -gitBranch ${{ github.head.ref }} \
         -host ${{ vars.HCI_HOST }} \
         -port  ${{ vars.HCI_PORT }} \
         -id ${{ vars.TSO_USER }} \
         -pass ${{ secrets.TSO_TOKEN }} \
         -protocol None \
         -code 1047 \
         -timeout 0 \
         -ispwServerConfig ${{ vars.CP_RUNTIME }} \
         -ispwConfigPath "GenApp_MainframeCore\ispwconfig-nosb.yml" \
         -ispwServerStream ${{ vars.CP_STREAM }} \
         -ispwServerApp ${{ vars.CP_APPL }} \
         -ispwCheckoutLevel "RLSE" \
         -ispwContainerCreation "per-branch" \
         -assignmentPrefix ${{ vars.CP_ASSIGNPREFIX }} \
         -gitRepoUrl "https://github.com/CPWRGIT/GITFLOW_GFLD_GHA.git" \
         -gitFromHash $previousCommit \
         -gitCommit $currentCommit 
    
      - name: Build
        uses: bmc-compuware/ispw-build@v1
        id: build
        with:
          ces_url: ${{ vars.CES_URL }}
          ces_token: ${{ secrets.CES_TOKEN }}
          srid: 'ispw'
          runtime_configuration: ${{ vars.CP_RUNTIME }}
          build_automatically: ${{ steps.sync.outputs.automaticBuildJson }}
          
      - name: Get the number of build failures
        run: echo "The number of build failures is ${{ steps.build.outputs.generate_failed_count }}"

      - name: Manual Intervention
        run: echo "selected to ${{ github.event.inputs.environment }} choice"
             
      - name: Run Tests
        run: echo "Ran Tests successfully!"
      
      - name: Promote to Pre-Prod
        run: echo "Promotion to Pre Prod successful!"

      - name: Run User Acceptance Tests
        run: echo "Ran User Aceptance tests successfully!" 

      - name: Promote to Prod
        run: echo "Promotion to Prod successful!"
